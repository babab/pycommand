This is pycommand.info, produced by makeinfo version 5.2 from
pycommand.texi.

     pycommand 0.3.0, June 04, 2015

     Benjamin Althues

     Copyright © 2013-2015, Benjamin Althues

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* pycommand: (pycommand.info). A clean and simplistic alternative for
                        argparse, optparse and getopt
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: pycommand.info,  Node: Top,  Next: Download and install,  Up: (dir)

pycommand Documentation
***********************

     pycommand 0.3.0, June 04, 2015

     Benjamin Althues

     Copyright © 2013-2015, Benjamin Althues

`A clean and simplistic alternative for argparse, optparse and getopt'

Pycommand is essentially a fancy wrapper around getopt that consists of
one simple ‘CommandBase’ class that you can use to create executable
commands for your python programs with very simplistic and readable
code.  It has support for subcommands and also nesting commands, so you
can create (multiple levels of) subcommands, with the ability to pass
the values of optional arguments of a command object to its subcommand
objects.  Supported Python versions are 2.7 and 3.2 and later.

   - Github: ‘https://github.com/babab/pycommand’

   - Bitbucket: ‘https://bitbucket.org/babab/pycommand’

   - PyPI: ‘https://pypi.python.org/pypi/pycommand/’

   - Documentation (latest stable PyPI version) -
     ‘http://pythonhosted.org/pycommand/’

   - Documentation (all versions) - ‘http://pycommand.readthedocs.org’

* Menu:

* Download and install:: 
* Quick setup from a template:: 
* Example #1 - A Basic command:: 
* Example #2 - Full example of one main command with two subcommands:: 
* Module documentation:: 
* Why was it created?:: 
* Change Log:: 
* Software license:: 
* Python Module Index:: 
* Index:: 


File: pycommand.info,  Node: Download and install,  Next: Quick setup from a template,  Prev: Top,  Up: Top

1 Download and install
**********************

If you have pip installed, you can just:

     # pip install pycommand

To work with the current development version, do something like this:

     $ git clone git://bitbucket.org/babab/pycommand.git
     # cd pycommand
     # pip install -e .


File: pycommand.info,  Node: Quick setup from a template,  Next: Example #1 - A Basic command,  Prev: Download and install,  Up: Top

2 Quick setup from a template
*****************************

To quicly start writing a command from a template (much like the
examples below), use pycommand’s helper script by running:

     $ pycommand init

This will ask you for an executable name, class name and template type
and it will save it to an executable file, ready to be used as a Python
shell script (for your Python package/module)).


File: pycommand.info,  Node: Example #1 - A Basic command,  Next: Example #2 - Full example of one main command with two subcommands,  Prev: Quick setup from a template,  Up: Top

3 Example #1 - A Basic command
******************************

Here is a demonstration of the automated usage text generation and
parsing of optional arguments.

If we name the script for which you can see the code below
‘basic-example’ and execute it, the following will be the output for
running ‘basic-example -h’ or ‘basic-example --help’:

     usage: basic-example [options]

     An example of a basic CLI program

     Options:
     -h, --help                        show this help information
     -f <filename>, --file=<filename>  use specified file
     --version                         show version information

And here is the code:

     #!/usr/bin/env python

     import pycommand
     import sys


     class BasicExampleCommand(pycommand.CommandBase):
         '''An example of a basic CLI program

         This is an example that demonstrates the handling of all possible
         settings for the optional arguments, managed via the `optionList`.
         This example does not handle positional arguments.

         '''
         usagestr = 'usage: basic-example [options]'
         description = __doc__.split('\n')[0]

         # optionList is a tuple of 2-tuples, in format:
         # (long-option, (short-option, argument, help-information))
         #
         # The order in which you define the options will be the order
         # in which they will appear in the usage message
         optionList = (
             ('help', ('h', False, 'show this help information')),

             # To specify that an option requires an argument just add a
             # string that describes it
             ('file', ('f', '<filename>', 'use specified file')),

             # Use an empty string to ommit short option. Long option names
             # cannot be ommitted, since they are used as dictionary keys in
             # `self.flags` which holds the validated input
             ('version', ('', False, 'show version information')),
         )

         def run(self):
             '''The `run` method of the main command

             You need to define a method in your class that actually deals
             with any options that the user of your program has set. We call
             it `run` here, but you can name it whatever you want.

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we only use the following three::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- Object/dict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

             '''
             if self.flags.help:
                 print(self.usage)
                 return 0
             elif self.flags.version:
                 print('Python version ' + sys.version.split()[0])
                 return 0
             elif self.flags.file:
                 print('filename = ' + self.flags.file)
                 return 0

             print('Program completed. Try adding "--help"')

     if __name__ == '__main__':
         # Shortcut for reading from sys.argv[1:] and sys.exit(status)
         pycommand.run_and_exit(BasicExampleCommand)

         # The shortcut is equivalent to the following:

         # cmd = BasicExampleCommand(sys.argv[1:])
         # if cmd.error:
         #     print('error: {0}'.format(cmd.error))
         #     sys.exit(1)
         # else:
         #     sys.exit(cmd.run())


File: pycommand.info,  Node: Example #2 - Full example of one main command with two subcommands,  Next: Module documentation,  Prev: Example #1 - A Basic command,  Up: Top

4 Example #2 - Full example of one main command with two subcommands
********************************************************************

Here is a full example demonstrating essentially the same program, but
with the ‘--help’ and ‘--version’ options replaced for subcommands:

     #!/usr/bin/env python

     import pycommand
     import sys


     class VersionCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example version'
         description = 'Show version information'

         def run(self):
             print('Python version ' + sys.version.split()[0])
             print('Fileflag = {0}'.format(self.parentFlags['file']))


     class HelpCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example help [<command>]'
         description = 'Show help information'

         def run(self):
             if self.args and self.args[0] == 'version':
                 print(VersionCommand([]).usage)
             print(cmd.usage)


     class FullExampleCommand(pycommand.CommandBase):
         '''An full example of a pycommand CLI program

         This is an example that demonstrates the mapping of subcommands
         and registrering the --file flag from the main command to its
         subcommand. It only explains new concepts that are not handled in
         ``basic-example``, so be sure to see that first.

         '''
         usagestr = 'usage: full-example [-f <filename>] <command> [<args>]'
         description = (
             'Commands:\n'
             '   help         show this help information\n'
             '   version      show full version information'
         )

         # Mapping of subcommands
         commands = {'help': HelpCommand,
                     'version': VersionCommand}

         optionList = (('file', ('f', '<filename>', 'use specified file')), )

         # Optional extra usage information
         usageTextExtra = (
             "See 'full-example help <command>' for more information on a "
             "specific command."
         )

         def run(self):
             '''The `run` method of the main command

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we use them all::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- OrderedDict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

                 parentFlags -- Dict of registered `flags` of another
                                `CommandBase` object.

             '''
             try:
                 cmd = super(FullExampleCommand, self).run()
             except pycommand.CommandExit as e:
                 return e.err

             # Register a flag of a parent command
             # :Parameters:
             #     - `optionName`: String. Name of option
             #     - `value`: Mixed. Value of parsed flag`
             cmd.registerParentFlag('file', self.flags.file)

             if cmd.error:
                 print('full-example {cmd}: {error}'
                       .format(cmd=self.args[0], error=cmd.error))
                 return 1
             else:
                 return cmd.run()


     if __name__ == '__main__':
         # Shortcut for reading from sys.argv[1:] and sys.exit(status)
         pycommand.run_and_exit(FullExampleCommand)

And here are some output examples:

     $ ./full-example
     usage: full-example [-f <filename>] <command> [<args>]

     Commands:
        help         show this help information
        version      show full version information

     Options:
     -f <filename>, --file=<filename>  use specified file

     See 'full-example help <command>' for more information on a specific command.

     $ ./full-example help version
     usage: full-example version

     Show version information

     $ ./full-example -f
     error: option -f requires argument

     $ ./full-example -f somefilename version
     Python version 3.3.2
     Fileflag = somefilename

     $ ./full-example version
     Python version 3.3.2
     Fileflag = None

     $ ./full-example help doesnotexist
     error: command doesnotexist does not exist


File: pycommand.info,  Node: Module documentation,  Next: Why was it created?,  Prev: Example #2 - Full example of one main command with two subcommands,  Up: Top

5 Module documentation
**********************

A clean and simplistic alternative for argparse, optparse and getopt

 -- Class: pycommand.CommandBase (argv=['-b', 'man', '-d',
          '_build/doctrees', '.', '_build/man'])

     Base class for (sub)commands

      -- Attribute: args = None

          List of parsed postional arguments

      -- Attribute: commands = {}

          Dictionary of commands and the callables they invoke.

      -- Attribute: description = ''

          String.  Small description of subcommand

      -- Attribute: error = None

          Thrown by GetoptError when parsing illegal arguments.

      -- Attribute: flags = None

          Dict of parsed options and corresponding arguments, if any.

      -- Attribute: optionList = {}

          Dictionary of options (as a tuple of 2-tuples).  This will be
          transformed to an OrderedDict when initializing the object.

          Example:

               optionList = (
                   ('help', ('h', False, 'show this help information')),
                   ('dry-run', ('n', False,
                                'only print output without actually running')),

                   # To specify that an option requires an argument
                   # just add a string that describes it
                   ('file', ('f', '<filename>', 'use specified file')),

                   # Use an empty string to ommit short option
                   ('debug', ('', False, 'show debug information')),
               )

      -- Attribute: parentFlags = None

          Dict of registered ‘flags’ of parent Command object.

      -- Method: registerParentFlag (optionName, value)

          Register a flag of a parent command


          Parameters:

             - ‘optionName’: String.  Name of option

             - ‘value’: Mixed.  Value of parsed flag‘

      -- Attribute: usage = None

          String with usage information

          The string is compiled using the values found for ‘usagestr’,
          ‘description’, ‘optionList’ and ‘usageTextExtra’.

      -- Attribute: usageTextExtra = ''

          String.  Optional extra usage information

      -- Attribute: usagestr = 'usage: command [options]'

          String.  Usage synopsis

 -- Exception: pycommand.OptionError

     Options/Flags AttributeError exception

 -- Class: pycommand.dictobject

     A dictionary with getters by attribute, used for flags

 -- Function: pycommand.run_and_exit (command_class)

     A shortcut for reading from sys.argv and exiting the interpreter


File: pycommand.info,  Node: Why was it created?,  Next: Change Log,  Prev: Module documentation,  Up: Top

6 Why was it created?
*********************

When parsing command line program arguments, I sometimes work with
‘argparse’ (a replacement for ‘optparse’).  I don’t really like the API
and the output it gives, which is the main reason I’ve always used
‘getopt’ for parsing arguments whenever possible.

The ‘CommandBase’ class was originally written for `DisPass', which is a
password manager/generator, as a means to easily define new subcommands
and have auto-generated usage messages.  Because I want to have this in
other projects I’ve decided to put it in the cheeseshop.


File: pycommand.info,  Node: Change Log,  Next: Software license,  Prev: Why was it created?,  Up: Top

7 Change Log
************

pycommand adheres to Semantic Versioning(1).

* Menu:

* 0.3.0 - 2015-06-04: 0 3 0 - 2015-06-04. 
* 0.2.0 - 2015-05-21: 0 2 0 - 2015-05-21. 
* 0.1.0 - 2013-08-08: 0 1 0 - 2013-08-08. 

   ---------- Footnotes ----------

   (1) http://semver.org/


File: pycommand.info,  Node: 0 3 0 - 2015-06-04,  Next: 0 2 0 - 2015-05-21,  Up: Change Log

7.1 0.3.0 - 2015-06-04
======================

* Menu:

* Added:: 
* Changed:: 


File: pycommand.info,  Node: Added,  Next: Changed,  Up: 0 3 0 - 2015-06-04

7.1.1 Added
-----------

   - Shortcut ‘run_and_exit()’ for reading from ‘sys.argv[1:]’ and
     exiting the interpreter via ‘sys.exit(status)’

   - Package as wheel distribution to speed up installations

   - Add ‘man pycommand’ ability, i.e.  install mandoc in
     ‘/usr/share/man3/’


File: pycommand.info,  Node: Changed,  Prev: Added,  Up: 0 3 0 - 2015-06-04

7.1.2 Changed
-------------

   - Add support for getting flags by attribute like ‘self.flags.help’.
     The default approach for normal dicts like ‘self.flags['help']’
     remains valid.


File: pycommand.info,  Node: 0 2 0 - 2015-05-21,  Next: 0 1 0 - 2013-08-08,  Prev: 0 3 0 - 2015-06-04,  Up: Change Log

7.2 0.2.0 - 2015-05-21
======================

* Menu:

* Added: Added<2>. 
* Changed: Changed<2>. 


File: pycommand.info,  Node: Added<2>,  Next: Changed<2>,  Up: 0 2 0 - 2015-05-21

7.2.1 Added
-----------

   - Full example of a command with subcommands

   - Create quick templates via pycommand script (‘pycommand init’)

   - Unit tests and automatic testing via Travis-CI

   - Documentation ‘man’ (.3) and ‘info’ (.info) pages


File: pycommand.info,  Node: Changed<2>,  Prev: Added<2>,  Up: 0 2 0 - 2015-05-21

7.2.2 Changed
-------------

   - Specification of subcommands can be defined in
     CommandBase.command(1) as a shortcut.

   ---------- Footnotes ----------

   (1) 
https://github.com/babab/pycommand/commit/a978a05ef92f70f0ce6b06d96a38c2caa8297ecc


File: pycommand.info,  Node: 0 1 0 - 2013-08-08,  Prev: 0 2 0 - 2015-05-21,  Up: Change Log

7.3 0.1.0 - 2013-08-08
======================

* Menu:

* Added: Added<3>. 


File: pycommand.info,  Node: Added<3>,  Up: 0 1 0 - 2013-08-08

7.3.1 Added
-----------

   - Initial release


File: pycommand.info,  Node: Software license,  Next: Python Module Index,  Prev: Change Log,  Up: Top

8 Software license
******************

Copyright (c) 2013-2015 Benjamin Althues <<benjamin@babab.nl>>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: pycommand.info,  Node: Python Module Index,  Next: Index,  Prev: Software license,  Up: Top

Python Module Index
*******************

* Menu:

* pycommand: 0. 


File: pycommand.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* args (pycommand.CommandBase attribute): Module documentation.
                                                               (line 13)
* CommandBase (class in pycommand):      Module documentation. (line  8)
* commands (pycommand.CommandBase attribute): Module documentation.
                                                               (line 17)
* description (pycommand.CommandBase attribute): Module documentation.
                                                               (line 21)
* dictobject (class in pycommand):       Module documentation. (line 87)
* error (pycommand.CommandBase attribute): Module documentation.
                                                               (line 25)
* flags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 29)
* OptionError:                           Module documentation. (line 83)
* optionList (pycommand.CommandBase attribute): Module documentation.
                                                               (line 33)
* parentFlags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 53)
* pycommand (module):                    Module documentation. (line  6)
* registerParentFlag() (pycommand.CommandBase method): Module documentation.
                                                               (line 57)
* run_and_exit() (in module pycommand):  Module documentation. (line 91)
* usage (pycommand.CommandBase attribute): Module documentation.
                                                               (line 68)
* usagestr (pycommand.CommandBase attribute): Module documentation.
                                                               (line 79)
* usageTextExtra (pycommand.CommandBase attribute): Module documentation.
                                                               (line 75)



Tag Table:
Node: Top414
Ref: index doc647
Ref: 1647
Node: Download and install1856
Ref: index download-and-install1967
Ref: 21967
Ref: index pycommand-0-3-01967
Ref: 31967
Node: Quick setup from a template2259
Ref: index quick-setup-from-a-template2395
Ref: 42395
Node: Example #1 - A Basic command2798
Ref: index example-1-a-basic-command2980
Ref: 52980
Node: Example #2 - Full example of one main command with two subcommands6767
Ref: index example-2-full-example-of-one-main-command-with-two-subcommands6942
Ref: 66942
Node: Module documentation11472
Ref: index module-documentation11638
Ref: 711638
Ref: index module-pycommand11638
Ref: 011638
Ref: index pycommand CommandBase11755
Ref: 811755
Ref: index pycommand CommandBase args11899
Ref: 911899
Ref: index pycommand CommandBase commands11978
Ref: a11978
Ref: index pycommand CommandBase description12078
Ref: b12078
Ref: index pycommand CommandBase error12168
Ref: c12168
Ref: index pycommand CommandBase flags12267
Ref: d12267
Ref: index pycommand CommandBase optionList12372
Ref: e12372
Ref: index pycommand CommandBase parentFlags13148
Ref: f13148
Ref: index pycommand CommandBase registerParentFlag13256
Ref: 1013256
Ref: index pycommand CommandBase usage13503
Ref: 1113503
Ref: index pycommand CommandBase usageTextExtra13727
Ref: 1213727
Ref: index pycommand CommandBase usagestr13821
Ref: 1313821
Ref: index pycommand OptionError13915
Ref: 1413915
Ref: index pycommand dictobject13998
Ref: 1513998
Ref: index pycommand run_and_exit14092
Ref: 1614092
Node: Why was it created?14217
Ref: index why-was-it-created14327
Ref: 1714327
Node: Change Log14926
Ref: index change-log15032
Ref: 1815032
Ref: Change Log-Footnote-115280
Node: 0 3 0 - 2015-06-0415307
Ref: index id115402
Ref: 1915402
Node: Added15483
Ref: index added15562
Ref: 1a15562
Node: Changed15872
Ref: index changed15951
Ref: 1b15951
Node: 0 2 0 - 2015-05-2116150
Ref: index id216272
Ref: 1c16272
Node: Added<2>16373
Ref: index id316458
Ref: 1d16458
Node: Changed<2>16722
Ref: index id416807
Ref: 1e16807
Ref: Changed<2>-Footnote-116968
Node: 0 1 0 - 2013-08-0817060
Ref: index id517155
Ref: 1f17155
Ref: index id617155
Ref: 2017155
Node: Added<3>17232
Ref: index id717298
Ref: 2117298
Node: Software license17345
Ref: index software-license17451
Ref: 2217451
Node: Python Module Index18249
Node: Index18418

End Tag Table


Local Variables:
coding: utf-8
End:
