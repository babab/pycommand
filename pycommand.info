This is pycommand.info, produced by makeinfo version 5.2 from
pycommand.texi.

     pycommand 0.1.0, December 27, 2013

     Benjamin Althues

     Copyright © 2013, Benjamin Althues

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* pycommand: (pycommand.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.1.3.


File: pycommand.info,  Node: Top,  Next: Why was it created?,  Up: (dir)

pycommand Documentation
***********************

     pycommand 0.1.0, December 27, 2013

     Benjamin Althues

     Copyright © 2013, Benjamin Althues

  *Parse command line arguments / define (sub)commands with minimal
code*

  Pycommand consists of one simple ‘CommandBase’ class that you can use
to create executable commands for your python programs with very
simplistic and readable code.  It has support for nesting commands, so
you can create (multiple levels of) subcommands, with the ability to
pass the values of optional arguments of a command object to its
subcommand objects.  Supported Python versions are 2.7 and 3.3

* Menu:

* Why was it created?:: 
* Download and install:: 
* Example #1 - A Basic command:: 
* Example #2 - Full example of one main command with two subcommands:: 
* Module documentation:: 
* Contributing:: 
* Software license:: 
* Python Module Index:: 
* Index:: 


File: pycommand.info,  Node: Why was it created?,  Next: Download and install,  Prev: Top,  Up: Top

1 Why was it created?
*********************

When parsing command line program arguments, I sometimes work with
‘argparse’ (a replacement for ‘optparse’).  I don’t really like the API
and the output it gives, which is the main reason I’ve always used
‘getopt’ for parsing arguments whenever possible.

  The ‘CommandBase’ class was originally written for _DisPass_, which is
a password manager/generator, as a means to easily define new
subcommands and have auto-generated usage messages.  Because I want to
have this in other projects I’ve decided to put it in the cheeseshop.


File: pycommand.info,  Node: Download and install,  Next: Example #1 - A Basic command,  Prev: Why was it created?,  Up: Top

2 Download and install
**********************

If you have pip installed, you can just:

     # pip install pycommand

  Otherwise, do something like this:

     $ git clone git://bitbucket.org/babab/pycommand.git
     # cd pycommand
     # python setup.py install


File: pycommand.info,  Node: Example #1 - A Basic command,  Next: Example #2 - Full example of one main command with two subcommands,  Prev: Download and install,  Up: Top

3 Example #1 - A Basic command
******************************

Here is a typical example of a very common command line interface
program:

     #!/usr/bin/env python

     import pycommand
     import sys


     class BasicExampleCommand(pycommand.CommandBase):
         '''An example of a basic CLI program

         This is an example that demonstrates the handling of all possible
         settings for the optional arguments, managed via the `optionList`.
         This example does not handle positional arguments.

         '''
         usagestr = 'usage: basic-example [options]'
         description = __doc__.split('\n')[0]

         # optionList is a tuple of 2-tuples, in format:
         # (long-option, (short-option, argument, help-information))
         #
         # The order in which you define the options will be the order
         # in which they will appear in the usage message
         optionList = (
             ('help', ('h', False, 'show this help information')),

             # To specify that an option requires an argument just add a
             # string that describes it
             ('file', ('f', '<filename>', 'use specified file')),

             # Use an empty string to ommit short option. Long option names
             # cannot be ommitted, since they are used as dictionary keys in
             # `self.flags` which holds the validated input
             ('version', ('', False, 'show version information')),
         )

         def run(self):
             '''The `run` method of the main command

             You need to define a method in your class that actually deals
             with any options that the user of your program has set. We call
             it `run` here, but you can name it whatever you want.

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we only use the following three::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- OrderedDict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

             '''
             if self.flags['help']:
                 print(self.usage)
                 return
             elif self.flags['version']:
                 print('Python version ' + sys.version.split()[0])
                 return
             elif self.flags['file']:
                 print('filename = ' + self.flags['file'])
                 return

             print('Program completed. Try adding "--help"')

     if __name__ == '__main__':
         cmd = BasicExampleCommand(sys.argv[1:])
         if cmd.error:
             print('error: {0}'.format(cmd.error))
             sys.exit(1)
         else:
             sys.exit(cmd.run())

  If we name this script ‘basic-example’ and execute it, the following
will be the output for running ‘basic-example -h’ or ‘basic-example
--help’:

     usage: basic-example [options]

     An example of a basic CLI program

     Options:
     -h, --help                        show this help information
     -f <filename>, --file=<filename>  use specified file
     --version                         show version information


File: pycommand.info,  Node: Example #2 - Full example of one main command with two subcommands,  Next: Module documentation,  Prev: Example #1 - A Basic command,  Up: Top

4 Example #2 - Full example of one main command with two subcommands
********************************************************************

Here is a full example demonstrating essentially the same program, but
with the ‘--help’ and ‘--version’ options replaced for subcommands:

     #!/usr/bin/env python

     import pycommand
     import sys


     class VersionCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example version'
         description = 'Show version information'

         def run(self):
             print('Python version ' + sys.version.split()[0])
             print('Fileflag = {0}'.format(self.parentFlags['file']))


     class HelpCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example help [<command>]'
         description = 'Show help information'

         def run(self):
             if self.args and self.args[0] == 'version':
                 print(VersionCommand([]).usage)
             print(cmd.usage)


     class FullExampleCommand(pycommand.CommandBase):
         '''An full example of a pycommand CLI program

         This is an example that demonstrates the mapping of subcommands
         and registrering the --file flag from the main command to its
         subcommand. It only explains new concepts that are not handled in
         ``basic-example``, so be sure to see that first.

         '''
         usagestr = 'usage: full-example [-f <filename>] <command> [<args>]'
         description = (
             'Commands:\n'
             '   help         show this help information\n'
             '   version      show full version information'
         )

         # Mapping of subcommands
         commands = {'help': HelpCommand,
                     'version': VersionCommand}

         optionList = (('file', ('f', '<filename>', 'use specified file')), )

         # Optional extra usage information
         usageTextExtra = (
             "See 'full-example help <command>' for more information on a "
             "specific command."
         )

         def run(self):
             '''The `run` method of the main command

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we use them all::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- OrderedDict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

                 parentFlags -- Dict of registered `flags` of another
                                `CommandBase` object.

             '''
             try:
                 cmd = super(FullExampleCommand, self).run()
             except pycommand.CommandExit as e:
                 return e.err

             # Register a flag of a parent command
             # :Parameters:
             #     - `optionName`: String. Name of option
             #     - `value`: Mixed. Value of parsed flag`
             cmd.registerParentFlag('file', self.flags['file'])

             if cmd.error:
                 print('full-example {cmd}: {error}'
                       .format(cmd=self.args[0], error=cmd.error))
                 return 1
             else:
                 return cmd.run()


     if __name__ == '__main__':
         cmd = FullExampleCommand(sys.argv[1:])
         if cmd.error:
             print('error: {0}'.format(cmd.error))
             sys.exit(1)
         else:
             sys.exit(cmd.run())

  And here are some outputs:

     $ ./full-example
     usage: full-example [-f <filename>] <command> [<args>]

     Commands:
        help         show this help information
        version      show full version information

     Options:
     -f <filename>, --file=<filename>  use specified file

     See 'full-example help <command>' for more information on a specific command.

     $ ./full-example help version
     usage: full-example version

     Show version information

     $ ./full-example -f
     error: option -f requires argument

     $ ./full-example -f somefilename version
     Python version 3.3.2
     Fileflag = somefilename

     $ ./full-example version
     Python version 3.3.2
     Fileflag = None

     $ ./full-example help doesnotexist
     error: command doesnotexist does not exist


File: pycommand.info,  Node: Module documentation,  Next: Contributing,  Prev: Example #2 - Full example of one main command with two subcommands,  Up: Top

5 Module documentation
**********************

Parse command line arguments / define (sub)commands with minimal code

 -- Class: pycommand.CommandBase (argv)

     Base class for (sub)commands

      -- Attribute: args

          List of parsed postional arguments

      -- Attribute: commands

          Dictionary of commands and the callables they invoke.

      -- Attribute: description

          String.  Small description of subcommand

      -- Attribute: error

          Thrown by GetoptError when parsing illegal arguments.

      -- Attribute: flags

          Dict of parsed options and corresponding arguments, if any.

      -- Attribute: optionList

          Dictionary of options (as a tuple of 2-tuples).  This will be
          transformed to an OrderedDict when initializing the object.

          Example:

               optionList = (
                   ('help', ('h', False, 'show this help information')),
                   ('dry-run', ('n', False,
                                'only print output without actually running')),

                   # To specify that an option requires an argument
                   # just add a string that describes it
                   ('file', ('f', '<filename>', 'use specified file')),

                   # Use an empty string to ommit short option
                   ('debug', ('', False, 'show debug information')),
               )

      -- Attribute: parentFlags

          Dict of registered ‘flags’ of parent Command object.

      -- Function: registerParentFlag (self, optionName, value)

          Register a flag of a parent command

               Parameters :

                  - ‘optionName’: String.  Name of option

                  - ‘value’: Mixed.  Value of parsed flag‘

      -- Attribute: usage

          String with usage information

          The string is compiled using the values found for ‘usagestr’,
          ‘description’, ‘optionList’ and ‘usageTextExtra’.

      -- Attribute: usageTextExtra

          String.  Optional extra usage information

      -- Attribute: usagestr

          String.  Usage synopsis


File: pycommand.info,  Node: Contributing,  Next: Software license,  Prev: Module documentation,  Up: Top

6 Contributing
**************

You can use Bitbucket or Github for discussing code, reporting bugs and
sending pull-requests.

   - Bitbucket: ‘https://bitbucket.org/babab/pycommand’

   - Github: ‘https://github.com/babab/pycommand’


File: pycommand.info,  Node: Software license,  Next: Python Module Index,  Prev: Contributing,  Up: Top

7 Software license
******************

Copyright (c) 2013 Benjamin Althues <<benjamin@babab.nl>>

  Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: pycommand.info,  Node: Python Module Index,  Next: Index,  Prev: Software license,  Up: Top

Python Module Index
*******************

* Menu:

* pycommand: 0. 


File: pycommand.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* args (pycommand.CommandBase attribute): Module documentation.
                                                               (line 12)
* CommandBase (class in pycommand):      Module documentation. (line  8)
* CommandBase.registerParentFlag() (in module pycommand): Module documentation.
                                                               (line 56)
* commands (pycommand.CommandBase attribute): Module documentation.
                                                               (line 16)
* description (pycommand.CommandBase attribute): Module documentation.
                                                               (line 20)
* error (pycommand.CommandBase attribute): Module documentation.
                                                               (line 24)
* flags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 28)
* optionList (pycommand.CommandBase attribute): Module documentation.
                                                               (line 32)
* parentFlags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 52)
* pycommand (module):                    Module documentation. (line  6)
* usage (pycommand.CommandBase attribute): Module documentation.
                                                               (line 66)
* usagestr (pycommand.CommandBase attribute): Module documentation.
                                                               (line 77)
* usageTextExtra (pycommand.CommandBase attribute): Module documentation.
                                                               (line 73)



Tag Table:
Node: Top353
Ref: index doc584
Ref: 1584
Node: Why was it created?1338
Ref: index why-was-it-created1441
Ref: 21441
Ref: index pycommand1441
Ref: 31441
Node: Download and install2042
Ref: index download-and-install2170
Ref: 42170
Node: Example #1 - A Basic command2436
Ref: index example-1-a-basic-command2611
Ref: 52611
Node: Example #2 - Full example of one main command with two subcommands6130
Ref: index example-2-full-example-of-one-main-command-with-two-subcommands6305
Ref: 66305
Node: Module documentation10904
Ref: index module-documentation11063
Ref: 711063
Ref: index module-pycommand11063
Ref: 011063
Ref: index pycommand CommandBase11181
Ref: 811181
Ref: index pycommand CommandBase args11257
Ref: 911257
Ref: index pycommand CommandBase commands11329
Ref: a11329
Ref: index pycommand CommandBase description11424
Ref: b11424
Ref: index pycommand CommandBase error11509
Ref: c11509
Ref: index pycommand CommandBase flags11601
Ref: d11601
Ref: index pycommand CommandBase optionList11699
Ref: e11699
Ref: index pycommand CommandBase parentFlags12470
Ref: f12470
Ref: index pycommand CommandBase registerParentFlag12571
Ref: 1012571
Ref: index pycommand CommandBase usage12841
Ref: 1112841
Ref: index pycommand CommandBase usageTextExtra13058
Ref: 1213058
Ref: index pycommand CommandBase usagestr13147
Ref: 1313147
Node: Contributing13212
Ref: index contributing13321
Ref: 1413321
Node: Software license13564
Ref: index software-license13672
Ref: 1513672
Node: Python Module Index14469
Node: Index14638

End Tag Table


Local Variables:
coding: utf-8
End:
