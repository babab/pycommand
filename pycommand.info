This is pycommand.info, produced by makeinfo version 5.2 from
pycommand.texi.

     pycommand 0.2.0, May 21, 2015

     Benjamin Althues

     Copyright © 2013, Benjamin Althues

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* pycommand: (pycommand.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.3.1.


File: pycommand.info,  Node: Top,  Next: Download and install,  Up: (dir)

pycommand Documentation
***********************

     pycommand 0.2.0, May 21, 2015

     Benjamin Althues

     Copyright © 2013, Benjamin Althues

`A clean and simplistic alternative for argparse, optparse and getopt'

Pycommand is essentially a fancy wrapper around getopt that consists of
one simple ‘CommandBase’ class that you can use to create executable
commands for your python programs with very simplistic and readable
code.  It has support for subcommands and also nesting commands, so you
can create (multiple levels of) subcommands, with the ability to pass
the values of optional arguments of a command object to its subcommand
objects.  Supported Python versions are 2.7 and 3.2 and later.

* Menu:

* Download and install:: 
* Quick setup from a template:: 
* Example #1 - A Basic command:: 
* Example #2 - Full example of one main command with two subcommands:: 
* Module documentation:: 
* Why was it created?:: 
* Contributing:: 
* Change Log:: 
* Software license:: 
* Python Module Index:: 
* Index:: 


File: pycommand.info,  Node: Download and install,  Next: Quick setup from a template,  Prev: Top,  Up: Top

1 Download and install
**********************

If you have pip installed, you can just:

     # pip install pycommand

To work with the current development version, do something like this:

     $ git clone git://bitbucket.org/babab/pycommand.git
     # cd pycommand
     # python setup.py install


File: pycommand.info,  Node: Quick setup from a template,  Next: Example #1 - A Basic command,  Prev: Download and install,  Up: Top

2 Quick setup from a template
*****************************

To quicly start writing a command from a template (much like the
examples below), use pycommand’s helper script by running:

     $ pycommand init

This will ask you for an executable name, class name and template type
and it will save it to an executable file, ready to be used as a Python
shell script (for your Python package/module)).


File: pycommand.info,  Node: Example #1 - A Basic command,  Next: Example #2 - Full example of one main command with two subcommands,  Prev: Quick setup from a template,  Up: Top

3 Example #1 - A Basic command
******************************

Here is a demonstration of the automated usage text generation and
parsing of optional arguments.

If we name the script for which you can see the code below
‘basic-example’ and execute it, the following will be the output for
running ‘basic-example -h’ or ‘basic-example --help’:

     usage: basic-example [options]

     An example of a basic CLI program

     Options:
     -h, --help                        show this help information
     -f <filename>, --file=<filename>  use specified file
     --version                         show version information

And here is the code:

     #!/usr/bin/env python

     import pycommand
     import sys


     class BasicExampleCommand(pycommand.CommandBase):
         '''An example of a basic CLI program

         This is an example that demonstrates the handling of all possible
         settings for the optional arguments, managed via the `optionList`.
         This example does not handle positional arguments.

         '''
         usagestr = 'usage: basic-example [options]'
         description = __doc__.split('\n')[0]

         # optionList is a tuple of 2-tuples, in format:
         # (long-option, (short-option, argument, help-information))
         #
         # The order in which you define the options will be the order
         # in which they will appear in the usage message
         optionList = (
             ('help', ('h', False, 'show this help information')),

             # To specify that an option requires an argument just add a
             # string that describes it
             ('file', ('f', '<filename>', 'use specified file')),

             # Use an empty string to ommit short option. Long option names
             # cannot be ommitted, since they are used as dictionary keys in
             # `self.flags` which holds the validated input
             ('version', ('', False, 'show version information')),
         )

         def run(self):
             '''The `run` method of the main command

             You need to define a method in your class that actually deals
             with any options that the user of your program has set. We call
             it `run` here, but you can name it whatever you want.

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we only use the following three::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- OrderedDict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

             '''
             if self.flags['help']:
                 print(self.usage)
                 return
             elif self.flags['version']:
                 print('Python version ' + sys.version.split()[0])
                 return
             elif self.flags['file']:
                 print('filename = ' + self.flags['file'])
                 return

             print('Program completed. Try adding "--help"')

     if __name__ == '__main__':
         cmd = BasicExampleCommand(sys.argv[1:])
         if cmd.error:
             print('error: {0}'.format(cmd.error))
             sys.exit(1)
         else:
             sys.exit(cmd.run())


File: pycommand.info,  Node: Example #2 - Full example of one main command with two subcommands,  Next: Module documentation,  Prev: Example #1 - A Basic command,  Up: Top

4 Example #2 - Full example of one main command with two subcommands
********************************************************************

Here is a full example demonstrating essentially the same program, but
with the ‘--help’ and ‘--version’ options replaced for subcommands:

     #!/usr/bin/env python

     import pycommand
     import sys


     class VersionCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example version'
         description = 'Show version information'

         def run(self):
             print('Python version ' + sys.version.split()[0])
             print('Fileflag = {0}'.format(self.parentFlags['file']))


     class HelpCommand(pycommand.CommandBase):
         usagestr = 'usage: full-example help [<command>]'
         description = 'Show help information'

         def run(self):
             if self.args and self.args[0] == 'version':
                 print(VersionCommand([]).usage)
             print(cmd.usage)


     class FullExampleCommand(pycommand.CommandBase):
         '''An full example of a pycommand CLI program

         This is an example that demonstrates the mapping of subcommands
         and registrering the --file flag from the main command to its
         subcommand. It only explains new concepts that are not handled in
         ``basic-example``, so be sure to see that first.

         '''
         usagestr = 'usage: full-example [-f <filename>] <command> [<args>]'
         description = (
             'Commands:\n'
             '   help         show this help information\n'
             '   version      show full version information'
         )

         # Mapping of subcommands
         commands = {'help': HelpCommand,
                     'version': VersionCommand}

         optionList = (('file', ('f', '<filename>', 'use specified file')), )

         # Optional extra usage information
         usageTextExtra = (
             "See 'full-example help <command>' for more information on a "
             "specific command."
         )

         def run(self):
             '''The `run` method of the main command

             After the object has been created, there are 4 instance
             variables ready for you to use to write the flow of the program.
             In this example we use them all::

                 error -- Thrown by GetoptError when parsing illegal
                          arguments

                 flags -- OrderedDict of parsed options and corresponding
                          arguments, if any.

                 usage -- String with usage information. The string
                          is compiled using the values found for `usagestr`,
                          `description`, `optionList` and `usageTextExtra`.

                 parentFlags -- Dict of registered `flags` of another
                                `CommandBase` object.

             '''
             try:
                 cmd = super(FullExampleCommand, self).run()
             except pycommand.CommandExit as e:
                 return e.err

             # Register a flag of a parent command
             # :Parameters:
             #     - `optionName`: String. Name of option
             #     - `value`: Mixed. Value of parsed flag`
             cmd.registerParentFlag('file', self.flags['file'])

             if cmd.error:
                 print('full-example {cmd}: {error}'
                       .format(cmd=self.args[0], error=cmd.error))
                 return 1
             else:
                 return cmd.run()


     if __name__ == '__main__':
         cmd = FullExampleCommand(sys.argv[1:])
         if cmd.error:
             print('error: {0}'.format(cmd.error))
             sys.exit(1)
         else:
             sys.exit(cmd.run())

And here are some output examples:

     $ ./full-example
     usage: full-example [-f <filename>] <command> [<args>]

     Commands:
        help         show this help information
        version      show full version information

     Options:
     -f <filename>, --file=<filename>  use specified file

     See 'full-example help <command>' for more information on a specific command.

     $ ./full-example help version
     usage: full-example version

     Show version information

     $ ./full-example -f
     error: option -f requires argument

     $ ./full-example -f somefilename version
     Python version 3.3.2
     Fileflag = somefilename

     $ ./full-example version
     Python version 3.3.2
     Fileflag = None

     $ ./full-example help doesnotexist
     error: command doesnotexist does not exist


File: pycommand.info,  Node: Module documentation,  Next: Why was it created?,  Prev: Example #2 - Full example of one main command with two subcommands,  Up: Top

5 Module documentation
**********************

A clean and simplistic alternative for argparse, optparse and getopt

 -- Class: pycommand.CommandBase (argv=['-b', 'html', '-d',
          '_build/doctrees', '.', '_build/html'])

     Base class for (sub)commands

      -- Attribute: args = None

          List of parsed postional arguments

      -- Attribute: commands = {}

          Dictionary of commands and the callables they invoke.

      -- Attribute: description = ''

          String.  Small description of subcommand

      -- Attribute: error = None

          Thrown by GetoptError when parsing illegal arguments.

      -- Attribute: flags = None

          Dict of parsed options and corresponding arguments, if any.

      -- Attribute: optionList = {}

          Dictionary of options (as a tuple of 2-tuples).  This will be
          transformed to an OrderedDict when initializing the object.

          Example:

               optionList = (
                   ('help', ('h', False, 'show this help information')),
                   ('dry-run', ('n', False,
                                'only print output without actually running')),

                   # To specify that an option requires an argument
                   # just add a string that describes it
                   ('file', ('f', '<filename>', 'use specified file')),

                   # Use an empty string to ommit short option
                   ('debug', ('', False, 'show debug information')),
               )

      -- Attribute: parentFlags = None

          Dict of registered ‘flags’ of parent Command object.

      -- Method: registerParentFlag (optionName, value)

          Register a flag of a parent command


          Parameters:

             - ‘optionName’: String.  Name of option

             - ‘value’: Mixed.  Value of parsed flag‘

      -- Attribute: usage = None

          String with usage information

          The string is compiled using the values found for ‘usagestr’,
          ‘description’, ‘optionList’ and ‘usageTextExtra’.

      -- Attribute: usageTextExtra = ''

          String.  Optional extra usage information

      -- Attribute: usagestr = 'usage: command [options]'

          String.  Usage synopsis


File: pycommand.info,  Node: Why was it created?,  Next: Contributing,  Prev: Module documentation,  Up: Top

6 Why was it created?
*********************

When parsing command line program arguments, I sometimes work with
‘argparse’ (a replacement for ‘optparse’).  I don’t really like the API
and the output it gives, which is the main reason I’ve always used
‘getopt’ for parsing arguments whenever possible.

The ‘CommandBase’ class was originally written for `DisPass', which is a
password manager/generator, as a means to easily define new subcommands
and have auto-generated usage messages.  Because I want to have this in
other projects I’ve decided to put it in the cheeseshop.


File: pycommand.info,  Node: Contributing,  Next: Change Log,  Prev: Why was it created?,  Up: Top

7 Contributing
**************

You can use Bitbucket or Github for discussing code, reporting bugs and
sending pull-requests.

   - Bitbucket: ‘https://bitbucket.org/babab/pycommand’

   - Github: ‘https://github.com/babab/pycommand’


File: pycommand.info,  Node: Change Log,  Next: Software license,  Prev: Contributing,  Up: Top

8 Change Log
************

All notable changes to pycommand will be documented here.  The project
adheres to Semantic Versioning(1).

* Menu:

* 0.2.0 - 2015-05-21: 0 2 0 - 2015-05-21. 
* 0.1.0 - 2013-08-08: 0 1 0 - 2013-08-08. 

   ---------- Footnotes ----------

   (1) http://semver.org/


File: pycommand.info,  Node: 0 2 0 - 2015-05-21,  Next: 0 1 0 - 2013-08-08,  Up: Change Log

8.1 0.2.0 - 2015-05-21
======================

* Menu:

* Added:: 
* Changed:: 


File: pycommand.info,  Node: Added,  Next: Changed,  Up: 0 2 0 - 2015-05-21

8.1.1 Added
-----------

   - Full example of a command with subcommands

   - Create quick templates via pycommand script (‘pycommand init’)

   - Unit tests and automatic testing via Travis-CI

   - Documentation ‘man’ (.3) and ‘info’ (.info) pages


File: pycommand.info,  Node: Changed,  Prev: Added,  Up: 0 2 0 - 2015-05-21

8.1.2 Changed
-------------

   - Specification of subcommands can be defined in
     CommandBase.command(1) as a shortcut.

   ---------- Footnotes ----------

   (1) 
https://github.com/babab/pycommand/commit/a978a05ef92f70f0ce6b06d96a38c2caa8297ecc


File: pycommand.info,  Node: 0 1 0 - 2013-08-08,  Prev: 0 2 0 - 2015-05-21,  Up: Change Log

8.2 0.1.0 - 2013-08-08
======================

* Menu:

* Added: Added<2>. 


File: pycommand.info,  Node: Added<2>,  Up: 0 1 0 - 2013-08-08

8.2.1 Added
-----------

   - Initial release


File: pycommand.info,  Node: Software license,  Next: Python Module Index,  Prev: Change Log,  Up: Top

9 Software license
******************

Copyright (c) 2013-2015 Benjamin Althues <<benjamin@babab.nl>>

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: pycommand.info,  Node: Python Module Index,  Next: Index,  Prev: Software license,  Up: Top

Python Module Index
*******************

* Menu:

* pycommand: 0. 


File: pycommand.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* args (pycommand.CommandBase attribute): Module documentation.
                                                               (line 13)
* CommandBase (class in pycommand):      Module documentation. (line  8)
* commands (pycommand.CommandBase attribute): Module documentation.
                                                               (line 17)
* description (pycommand.CommandBase attribute): Module documentation.
                                                               (line 21)
* error (pycommand.CommandBase attribute): Module documentation.
                                                               (line 25)
* flags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 29)
* optionList (pycommand.CommandBase attribute): Module documentation.
                                                               (line 33)
* parentFlags (pycommand.CommandBase attribute): Module documentation.
                                                               (line 53)
* pycommand (module):                    Module documentation. (line  6)
* registerParentFlag() (pycommand.CommandBase method): Module documentation.
                                                               (line 57)
* usage (pycommand.CommandBase attribute): Module documentation.
                                                               (line 68)
* usagestr (pycommand.CommandBase attribute): Module documentation.
                                                               (line 79)
* usageTextExtra (pycommand.CommandBase attribute): Module documentation.
                                                               (line 75)



Tag Table:
Node: Top348
Ref: index doc575
Ref: 1575
Node: Download and install1455
Ref: index pycommand-0-2-01566
Ref: 21566
Ref: index download-and-install1566
Ref: 31566
Node: Quick setup from a template1865
Ref: index quick-setup-from-a-template2001
Ref: 42001
Node: Example #1 - A Basic command2404
Ref: index example-1-a-basic-command2586
Ref: 52586
Node: Example #2 - Full example of one main command with two subcommands6185
Ref: index example-2-full-example-of-one-main-command-with-two-subcommands6360
Ref: 66360
Node: Module documentation10965
Ref: index module-pycommand11131
Ref: 011131
Ref: index module-documentation11131
Ref: 711131
Ref: index pycommand CommandBase11248
Ref: 811248
Ref: index pycommand CommandBase args11394
Ref: 911394
Ref: index pycommand CommandBase commands11473
Ref: a11473
Ref: index pycommand CommandBase description11573
Ref: b11573
Ref: index pycommand CommandBase error11663
Ref: c11663
Ref: index pycommand CommandBase flags11762
Ref: d11762
Ref: index pycommand CommandBase optionList11867
Ref: e11867
Ref: index pycommand CommandBase parentFlags12643
Ref: f12643
Ref: index pycommand CommandBase registerParentFlag12751
Ref: 1012751
Ref: index pycommand CommandBase usage12998
Ref: 1112998
Ref: index pycommand CommandBase usageTextExtra13222
Ref: 1213222
Ref: index pycommand CommandBase usagestr13316
Ref: 1313316
Node: Why was it created?13410
Ref: index why-was-it-created13522
Ref: 1413522
Node: Contributing14121
Ref: index contributing14223
Ref: 1514223
Node: Change Log14466
Ref: index change-log14565
Ref: 1614565
Ref: Change Log-Footnote-114831
Node: 0 2 0 - 2015-05-2114858
Ref: index id114953
Ref: 1714953
Node: Added15034
Ref: index added15113
Ref: 1815113
Node: Changed15377
Ref: index changed15456
Ref: 1915456
Ref: Changed-Footnote-115617
Node: 0 1 0 - 2013-08-0815709
Ref: index id315804
Ref: 1a15804
Ref: index id215804
Ref: 1b15804
Node: Added<2>15881
Ref: index id415947
Ref: 1c15947
Node: Software license15994
Ref: index software-license16100
Ref: 1d16100
Node: Python Module Index16898
Node: Index17067

End Tag Table


Local Variables:
coding: utf-8
End:
